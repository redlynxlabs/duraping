plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'me.modmuss50.mod-publish-plugin'
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})"
        }
        client {
            client()
        }
        data {
            clientData()

            // DataGen can be run by - "./gradlew :neoforge:runData" in Terminal.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.jar.doFirst {
    def modsTomlFile = file("$buildDir/resources/main/META-INF/neoforge.mods.toml")
    if (modsTomlFile.exists()) {
        def content = modsTomlFile.text
        content = content.replace('version = "unspecified"', "version = \"${rootProject.version}\"")
        modsTomlFile.text = content
    }
}

publishMods {
    file = tasks.jar.archiveFile
    changelog = providers.fileContents(layout.projectDirectory.file("../../CHANGELOG.md")).asText
    type = STABLE
    modLoaders.add("neoforge")
    displayName = "DuraPing v${version}"
    
    // Enable dry run if API keys are missing (for local testing)
    dryRun = providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null
    
    // CurseForge Publishing
    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = property("curseforge_id").toString()
        minecraftVersions.add(minecraft_version)
        
        // Dependencies
        requires {
            slug = "neoforge"
        }
        requires {
            slug = "cloth-config"
        }
        optional {
            slug = "modmenu"
        }
    }
    
    // Modrinth Publishing
    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = property("modrinth_id").toString()
        minecraftVersions.add(minecraft_version)
        
        // Dependencies
        requires("neoforge")
        requires("cloth-config")
        optional("modmenu")
    }
}